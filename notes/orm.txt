1. ORM stands for Object Relational Mapping
2. It is a way to query a database without having to write
    raw SQL queries

3. Some equivalent ORMs of raw sql queries
    => INSERT INTO Student (name, age, email) VALUES ("Ram", 20, "r@email.com")
    => Student.objects.create(name="Ram", age=20, email="r@email.com")

    => Select * from Student where id=1
    => Student.objects.filter(id=1)


CRUD ORMs
Let's consider "Student" as a model

Create:
Student.objects.create(name="", age="", email="", address="")


Read:
1. Student.objects.all()
        => Gives all the student objects in Queryset
        => Queryset is a list-like data type. But unlike list, querysets are immutable
        => Queryset also supports index as in list. But unlike list, negative indexing is not possible in queryset.
2. Student.objects.filter(id=1)
    => filter() also returns queryset but it gives selected objects only.
    => If filter is applied to non-existing data then it returns an empty queryset (neither None nor error)

3. Student.objects.get(id=1)
    => It returns a single object.
    => if get() is applied to non-existing data or multiple-existing data then it raises DoesNotExists error and
        MultipleObjectsReturned error respectively.


Update:
=> update() method is used to update data in a table
=> This update() method can be used in a queryset but not in a single object.

1. Student.objects.all().update(age=30)
2. Student.objects.filter(address="KTM").update(age=30)
3. Student.objects.filter(id=1).update(name="Ram")


Delete:
=> delete() method is used to delete a row or multiple rows in a table
=> this delete() method can be used both in a queryset and an object

1. Student.objects.filter(address="KTM").delete()
2. Student.objects.get(id=3).delete()